import logging
from telegram import Update
from telegram.ext import ContextTypes
from openrouter_client import OpenRouterClient
from database import Database
from config import Config
from utils.helpers import split_message

db = Database()
joke_client = OpenRouterClient()

async def handle_joke_request(update: Update, context: ContextTypes.DEFAULT_TYPE, theme: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–Ω–µ–∫–¥–æ—Ç–∞"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if not db.can_make_request(user.id):
        await update.message.reply_text(
            f"‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({Config.MAX_REQUESTS_PER_USER} –∑–∞–ø—Ä–æ—Å–æ–≤). "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!"
        )
        return
    
    try:
        await update.message.reply_text(f"üé≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ —Ç–µ–º—É '{theme}'...")
        
        joke, tokens_used = joke_client.generate_joke(theme)
        
        if joke.startswith(('‚ùå', '‚ö†Ô∏è')):
            await update_message_with_retry(update, joke)
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            db.log_request(user.id, theme, joke, tokens_used)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç —á–∞—Å—Ç—è–º–∏ –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π
            message_parts = split_message(joke, Config.MAX_MESSAGE_LENGTH)
            for part in message_parts:
                await update_message_with_retry(update, part)
                
    except Exception as e:
        logging.error(f"Error in handle_joke_request: {e}")
        await update_message_with_retry(update, "üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    user_message = update.message.text.strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(user_message) < 2:
        return
    
    await handle_joke_request(update, context, user_message)

async def update_message_with_retry(update: Update, text: str, max_retries: int = 3):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            await update.message.reply_text(text)
            return
        except Exception as e:
            if attempt == max_retries - 1:
                logging.error(f"Failed to send message after {max_retries} attempts: {e}")
                raise
            logging.warning(f"Attempt {attempt + 1} failed, retrying...")
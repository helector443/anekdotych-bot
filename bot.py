import logging
import time
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    ContextTypes, filters, CallbackContext
)

from handlers.commands import (
    start_command, help_command, stats_command, 
    top_command, admin_command
)
from handlers.messages import handle_text_message, handle_joke_request
from database import Database
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class AnekdotychBot:
    def __init__(self):
        self.db = Database()
        self.application = Application.builder().token(Config.TELEGRAM_TOKEN).build()
        self.setup_handlers()
        self.setup_jobs()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", start_command))
        self.application.add_handler(CommandHandler("help", help_command))
        self.application.add_handler(CommandHandler("stats", stats_command))
        self.application.add_handler(CommandHandler("top", top_command))
        self.application.add_handler(CommandHandler("admin", admin_command))
        self.application.add_handler(CommandHandler("joke", self.joke_command))
        self.application.add_handler(CommandHandler("random", self.random_joke_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            handle_text_message
        ))
    
    def setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        job_queue = self.application.job_queue
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        job_queue.run_repeating(self.health_check, interval=1800, first=10)
    
    async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /joke"""
        if context.args:
            theme = ' '.join(context.args)
            await handle_joke_request(update, context, theme)
        else:
            await update.message.reply_text("üé≠ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–∞!\n–ü—Ä–∏–º–µ—Ä: /joke –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã")
    
    async def random_joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random"""
        await handle_joke_request(update, context, "random")
    
    async def health_check(self, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            stats = self.db.get_global_stats()
            logging.info("‚úÖ Health check passed")
        except Exception as e:
            logging.error(f"‚ùå Health check failed: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ë–æ—Ç –ê–Ω–µ–∫–¥–æ—Ç—ã—á –∑–∞–ø—É—â–µ–Ω!")
        print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        print(f"Telegram Token: {'‚úÖ' if Config.TELEGRAM_TOKEN else '‚ùå'}")
        print(f"OpenRouter API Key: {'‚úÖ' if Config.OPENROUTER_API_KEY else '‚ùå'}")
        print(f"Database: {'‚úÖ' if self.db else '‚ùå'}")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ 24/7!")
        
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = AnekdotychBot()
    bot.run()